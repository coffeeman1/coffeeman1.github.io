{"meta":{"title":"커피맨","subtitle":"커피를 좋아하고 코딩을 좋아하는 커피맨~~","description":"본 블로그를 통해서 부수입을 30만원이상 벌어들이는게 우선 목표입니다. 애들 학원비 마련해야 겠다.","author":"커피맨","url":"http://coffeeman1.github.io","root":"/"},"pages":[{"title":"커피맨","date":"2023-03-08T14:10:33.000Z","updated":"2023-03-08T14:32:36.138Z","comments":true,"path":"about/index.html","permalink":"http://coffeeman1.github.io/about/index.html","excerpt":"","text":"커피 한잔과 코딩을 ~~ 코딩 하는게 즐겁다. 무언가 알아가고 새로운걸 배우면서 내가 성장할때 보람을 느낀다. 많은 기술블로그로 부터 새로운 기술을 배웠고 나도 누군가에게 무언가 배풀수 있는 사람이 되고자 블로그를 개설했다. 글을 쓰는게 쉽지는 않지만 계속 쓰다보면 늘거라 예상하고 꾸준히 포스팅 하자. 누군가에게 도움이 되는 기술 블로그로 성장하고 하루 1000명이 꾸준히 방문하는 블로그를 만드는게 1차 목표다. 목표를 달성할때 마다 이글을 업데이트 하겠다. 빠른 시일내에 1,000명 달성을 위해 화이팅!!! 2023년3월8일 커피맨..."}],"posts":[{"title":"Github SSH 연결방법","slug":"github-page2","date":"2023-03-03T16:14:47.000Z","updated":"2023-03-04T17:16:16.776Z","comments":true,"path":"2023/03/04/github-page2/","link":"","permalink":"http://coffeeman1.github.io/2023/03/04/github-page2/","excerpt":"","text":"개요GitHub 로그인을 ssh 로 설정하면 매번 로그인 할 필요없이 편하게 source 를 commit 하고 push 할수 있습니다.GitHub 에 SSH 설정하는 방법은 아래와 같습니다. Mac 기준으로 정리한 자료 입니다. window 에서도 크게다르지 않습니다. 설정방법SSH 키 생성 후 생성된 키를 클립보드에 복사합니다. 터미널을 오픈한 상태에서 ssh-keygen 명령어를 실행합니다. 기본값설정을 위해 엔터 엔터를 입력합니다.1ssh-keygen -t rsa -b 2048 -f ~/.ssh/coffeeman4.github.io_key 12345678910111213141516171819Generating public/private rsa key pair.Enter passphrase (empty for no passphrase):Enter same passphrase again: Your identification has been saved in /Users/gosu/.ssh/coffeeman4.github.io_keyYour public key has been saved in /Users/gosu/.ssh/coffeeman4.github.io_key.pubThe key fingerprint is:SHA256:wKbrNl+/z1qW+YsdfasdfpK0aONBLu3lSp6yd/jGm6PehoOKqs gosu@gosuui-iMac.localThe key&#x27;s randomart image is:+---[RSA 2048]----+| || . || = || ooo o + . || . . S o || ooo . o = o o || o.o.B + = ||. ooo=*oO.= . ||Eo..o==BO=O=+.. |+----[SHA256]-----+ 아래와 같이 coffeeman4.github.io_key 와 coffeeman4.github.io_key.pub 가 만들어진걸 확인할수 있습니다.123ls -al ~/.ssh-rw------- 1 gosu staff 1831 Mar 5 00:50 coffeeman4.github.io_key-rw-r--r-- 1 gosu staff 404 Mar 5 00:50 coffeeman4.github.io_key.pub 아래 명령어를 입력하고 pub key 값을 클립보드로 복사합니다.1cat ~/.ssh/coffeeman4.github.io_key.pub github 에 ssh 키를 등록합니다. 깃허브에 SSH 공개키 등록을 위해 깃허브 홈페이지에 로그인을 진행하고 아래 순서되로 키를 생성합니다.1 프로젝트를 선택합니다.2 Settings 아이콘을 클릭합니다.3 Deploy Key를 선택하합니다.4 Add deploy key 아이콘을 클릭합니다.5 coffeeman4.github.io_pub 키와 같은형태로 키를 생성합니다. ide 툴로 실습 code 버튼 클릭 Clone에 SSH 클릭 복사 아이콘 클릭 인텔리제이에서 clone File &gt; New &gt; Project from Version Control… 메뉴클릭 클립보드에 복사한 주소를 URL에 쪽에 입력한후 Clone 버튼을 클릭합니다. index.html 파일을 아래와 같이 생성합니다.1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;첫번째 글을 등록합니다.새로운 글을 등록합니다.&lt;/body&gt;&lt;/html&gt; 우측 상단의 커밋 아이콘을 클릭합니다. commit 할 파일을 선택합니다. 코멘트를 작성하고 commit and push 버튼을 클릭합니다. push 가 진행됩니다.진행시 별도의 아이디 패스워드를 물어보지 않습니다.즉 ssh 키를 통해 정상적으로 commit &amp; push 가 완료되었습니다. github 프로젝트 소스 확인 6분전에 commit 한 내용을 클릭합니다. 추가한 부분이 github 에 정상 반영되었습니다. github page 접속 확인http://coffeeman4.github.io 오픈하면 추가한 부분이 적용되었음을 알수 있습니다. 정리github 에 매번 로그인하여 소스를 commit&#x2F;push 하는 부분에 대한 개선이 되었고github page 도 정상적으로 반영되었습니다. coffeeman1.github.io 는 hexo라는정적 사이트 생성기로 만들어 졌습니다. 다음번 블로깅 할때는 hexo 사용하는 방법에 대해서정리해 보겠습니다.","categories":[{"name":"blog","slug":"blog","permalink":"http://coffeeman1.github.io/categories/blog/"}],"tags":[{"name":"github","slug":"github","permalink":"http://coffeeman1.github.io/tags/github/"}]},{"title":"Github Page 생성방법","slug":"github-page1","date":"2023-03-03T15:30:33.000Z","updated":"2023-03-08T15:10:42.223Z","comments":true,"path":"2023/03/04/github-page1/","link":"","permalink":"http://coffeeman1.github.io/2023/03/04/github-page1/","excerpt":"","text":"개요2023년 3월4일 기준 coffeeman1.github.io 사이트를 어떻게 만들었는지 기록 남깁니다.GitHub Pages는 GitHub 에서 제공해주는 정적 웹 사이트 서비스입니다. 이 서비스를 사용하면 개발자는 GitHub저장소에서 HTML,CSS 및 JavaScript 파일과 같은 정적 파일을 업로드하여 웹페이지를 만들수 있습니다.가장 큰장점은 무료로 웹사이트를 만들 수 있다는 부분이며, 개발자가 손쉽게 git 명령어를 통해 페이지를등록&#x2F;수정&#x2F;삭제를 할수 있습니다. 도메인 주소를 coffeeman.github.io로 하고 싶었지만 누군가 사용하고 있어 coffeeman중에서는 1등이라는의미로 coffeeman1.github.io 도메인을 만들었습니다. 아직 github 계정이 없다면 아래 Github 계정생성 페이지를 참고해서 계정 생성 바랍니다.Github 계정생성 생성순서 ‘+’ 아이콘을 클릭하여 New repository 메뉴를 선택합니다. 아래 순서대로 repository 생성을 진행합니다. Repository name 에 계정이름과 동일한 아래 그림에서는 계정이 coffeeman4 이므로 ‘coffeeman4.github.io’ 를 입력합니다. Add a README file 에 체크를 진행합니다. Create repository 버튼을 클릭하여 repository 생성을 완료합니다. 정리여기까지 진행하시면 아래와 같은 내용을 확인하실수 있습니다. 아직 coffeman4.github.io로 접속하면 404 에러가 발생합니다.git을 통해서 index.html을 추가하는 방법은 따로 정리하겠습니다.","categories":[{"name":"blog","slug":"blog","permalink":"http://coffeeman1.github.io/categories/blog/"}],"tags":[{"name":"github","slug":"github","permalink":"http://coffeeman1.github.io/tags/github/"}]},{"title":"Github 계정생성","slug":"blog/github-regist","date":"2023-03-02T13:58:47.000Z","updated":"2023-03-03T15:31:08.405Z","comments":true,"path":"2023/03/02/blog/github-regist/","link":"","permalink":"http://coffeeman1.github.io/2023/03/02/blog/github-regist/","excerpt":"","text":"개요2023년 3월 4일 기준 github 계정 생성하는 방법에 대해서 정리한 내용입니다. 진행순서진행 순서는 아래와 같습니다. https://github.com/ 사이트에 접속합니다. Sign up 아이콘을 클릭합니다. 이메일 주소 패스워드 이름을 메일 수신여부 y 입력하고 Continue 버튼을 클릭합니다. 같은 그림 2개가 들어가 있는 이미지를 선택합니다. 그림인증이 끝나고 나면 아래와 같은 화면이 나오고 Create account 버튼을 클릭하여 다음단계를 진행합니다. 등록한 이메일로 아래와 같은 인증 코드 복사한후 Enter Code 부분에 인증코드를 붙여넣기 합니다. 여기까지 진행하면 계정생성이 완료됩니다. 계정을 생성할때 음성으로 질문하는 경우도 있습니다. 음성에서 사람소리가 들리는데 몇번 말했는지 숫자를 적어주면 다음단계로 진행할수 있습니다.","categories":[{"name":"blog","slug":"blog","permalink":"http://coffeeman1.github.io/categories/blog/"}],"tags":[{"name":"github","slug":"github","permalink":"http://coffeeman1.github.io/tags/github/"}]},{"title":"무료로 hexo 블로그 만들기","slug":"blog/hexo","date":"2023-03-01T14:11:03.000Z","updated":"2023-03-10T15:00:37.573Z","comments":true,"path":"2023/03/01/blog/hexo/","link":"","permalink":"http://coffeeman1.github.io/2023/03/01/blog/hexo/","excerpt":"","text":"개요정적 웹사이트 생성기 hexo를 이용해서 블로그를 만든후 github page까지 반영하는 방법에 대해서 알아보자.커피맨 블로그를 만들면서 작업했던 내용들을 정리했고. 차근차근 따라서 진행하면 coffeeman1.github.io와같은 멋진 블로그를 무료를 만들수 있다. 사전준비사항준비사항은 아래와 같으며 본 블로그에 1,2,3 단계에 대해서 모두 정리해 두었으니 링크를 통해 사전준비를 끝내자. github 계정 github page 생성 github ssh 연결 hexo 설치아래 명령어를 입력하여 전역으로 hexo-cli 설치 1npm install hexo-cli -g 아래 명령어를 입력하여 hexo blog를 생성한다. 1hexo init blog 아래 명령어를 입력하여 hexo server 실행 123cd blognpm installhexo server http://localhost:4000/ 접속해서 아래와 같은 화면이 나오면 설치 완료 hexo 테마 적용하기https://hexo.io/themes/ 에서 hexo 다양한 테마를 다운로드 받을수 있다.본 블로그에서 사용하는 theme은 https://github.com/ppoffice/hexo-theme-hueman 은 이용했고 23년 3월10일 현재가장 최근 버전은 2020년 6월 21일 릴리즈된 0.5.0 버전이다. 설치설치는 https://github.com/ppoffice/hexo-theme-hueman/wiki/Installation 문서를 보고 참고함 먼저 프로젝트를 blog 폴더 아래에 themes&#x2F;hueman 로 복제함 12cd bloggit clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 실행결과 1234567Cloning into &#x27;themes/hueman&#x27;...remote: Enumerating objects: 2277, done.remote: Counting objects: 100% (16/16), done.remote: Compressing objects: 100% (14/14), done.remote: Total 2277 (delta 3), reused 11 (delta 2), pack-reused 2261Receiving objects: 100% (2277/2277), 5.77 MiB | 6.42 MiB/s, done.Resolving deltas: 100% (1218/1218), done. blog 폴더의 _confi.yml파일에서 theme을 파일을 열어서 아래와 같이 설치한 theme명으로 수정한다 theme: landscape 123456... 중략 ...# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hueman... 중략 ... themes\\hueman 디렉토리로 이동한후 _config.yml.example 파일일 _config.yml로 수정한다. 12cd cd themes/huemanmv _config.yml.example _config.yml 실행상위 디렉토리로 이동한후 hexo 서버를 구동시킨다. 123cd ..cd ..hexo server 실행결과 123INFO Validating configINFO Start processingINFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. 웹브라우저에서 url http://localhost:4000/ 를 입력하고 아래와 같은 그림이 나오면 성공 hexo 환경설정블로그 환경설정을 위해 blog&#x2F;_config.xml 파일을 아래와 같이 수정함. 사이트및 url 정보123456789101112# Sitetitle: 커피맨4subtitle: 커피맨4번째 블로그 입니다.description: 블로그 테스트를 위해서 환경설정한 내용입니다.keywords:author: coffeemanlanguage: kotimezone: asia/seoul# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: http://coffeeman4.github.io github 에 배포를 위한 deploy 정보123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: git@github.com:coffeeman4/coffeeman4.github.io.git branch: main 배포하기준비물배포를 위해 hexo-deployer-git 플러그인을 설치한다. 설치명령어는 아래와 같다. 1npm install hexo-deployer-git --save 배포순서배포는 먼저 정적인 페이지(html)를 만들고 github page 쪽으로 deploy 하는 형태로 진행한다. 정적 페이지 만들기먼저 배포될 디렉토릴 파일을 깨끗히 정리한다. 1hexo clean 실행결과 123INFO Validating configINFO Deleted database.INFO Deleted public folder. 아래 명령어를 입력하여 정적 페이지를 생성한다. 1hexo generate 정상적으로 실행되면 아래와 같이 public 디렉토리에 블로그 구성을 필요한 파일들이 생성됨을 확인할수 있다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384INFO Validating configINFO Start processingINFO Files loaded in 110 msINFO Generated: archives/2023/index.htmlINFO Generated: archives/index.htmlINFO Generated: index.htmlINFO Generated: css/fonts/fontawesome-webfont.woff2INFO Generated: js/script.jsINFO Generated: fancybox/jquery.fancybox.min.cssINFO Generated: archives/2023/03/index.htmlINFO Generated: libs/justified-gallery/justifiedGallery.min.cssINFO Generated: libs/font-awesome/css/font-awesome.cssINFO Generated: css/images/logo-header.pngINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: libs/font-awesome/fonts/fontawesome-webfont.ttfINFO Generated: libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2INFO Generated: libs/source-code-pro/styles.cssINFO Generated: js/main.jsINFO Generated: libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2INFO Generated: js/insight.jsINFO Generated: libs/titillium-web/styles.cssINFO Generated: fancybox/jquery.fancybox.min.jsINFO Generated: css/style.cssINFO Generated: libs/justified-gallery/jquery.justifiedGallery.min.jsINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: libs/font-awesome/css/font-awesome.min.cssINFO Generated: js/jquery-3.4.1.min.jsINFO Generated: css/fonts/FontAwesome.otfINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: css/images/opacity-10.pngINFO Generated: css/images/s-left.pngINFO Generated: css/images/thumb-default-small.pngINFO Generated: libs/font-awesome/fonts/FontAwesome.otfINFO Generated: css/images/thumb-default.pngINFO Generated: libs/jquery/3.5.0/jquery.min.jsINFO Generated: libs/lightgallery/fonts/lg.svgINFO Generated: css/images/banner.jpgINFO Generated: libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2INFO Generated: libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2INFO Generated: libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2INFO Generated: libs/font-awesome/fonts/fontawesome-webfont.woffINFO Generated: libs/font-awesome/fonts/fontawesome-webfont.eotINFO Generated: 2023/03/09/hello-world/index.htmlINFO Generated: libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2INFO Generated: libs/lightgallery/css/lg-fb-comment-box.cssINFO Generated: libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2INFO Generated: libs/lightgallery/js/lg-autoplay.jsINFO Generated: libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2INFO Generated: libs/font-awesome/fonts/fontawesome-webfont.woff2INFO Generated: libs/lightgallery/img/loading.gifINFO Generated: libs/lightgallery/css/lg-fb-comment-box.min.cssINFO Generated: libs/lightgallery/js/lg-fullscreen.min.jsINFO Generated: libs/lightgallery/js/lg-pager.jsINFO Generated: libs/lightgallery/js/lg-video.min.jsINFO Generated: libs/lightgallery/js/lg-share.jsINFO Generated: libs/lightgallery/js/lg-pager.min.jsINFO Generated: libs/lightgallery/js/lg-share.min.jsINFO Generated: libs/lightgallery/js/lg-hash.jsINFO Generated: libs/lightgallery/js/lg-thumbnail.min.jsINFO Generated: libs/lightgallery/js/lg-fullscreen.jsINFO Generated: libs/lightgallery/js/lg-autoplay.min.jsINFO Generated: libs/lightgallery/js/lg-video.jsINFO Generated: libs/lightgallery/css/lightgallery.cssINFO Generated: libs/lightgallery/js/lg-thumbnail.jsINFO Generated: libs/lightgallery/js/lightgallery.jsINFO Generated: libs/lightgallery/css/lightgallery.min.cssINFO Generated: libs/lightgallery/js/lightgallery.min.jsINFO Generated: libs/font-awesome/fonts/fontawesome-webfont.svgINFO Generated: libs/lightgallery/js/lg-zoom.min.jsINFO Generated: libs/lightgallery/js/lg-zoom.jsINFO Generated: libs/lightgallery/fonts/lg.ttfINFO Generated: libs/lightgallery/css/lg-transitions.cssINFO Generated: libs/lightgallery/js/lg-hash.min.jsINFO Generated: libs/lightgallery/fonts/lg.woffINFO Generated: libs/lightgallery/img/youtube-play.pngINFO Generated: libs/lightgallery/img/vimeo-play.pngINFO Generated: libs/lightgallery/css/lg-transitions.css.mapINFO Generated: libs/lightgallery/fonts/lg.eotINFO Generated: libs/lightgallery/css/lg-fb-comment-box.css.mapINFO Generated: libs/lightgallery/css/lightgallery.css.mapINFO Generated: libs/lightgallery/img/video-play.pngINFO Generated: libs/lightgallery/css/lg-transitions.min.cssINFO Generated: css/fonts/fontawesome-webfont.svgINFO 80 files generated in 314 ms 배포하기아래 명령어를 입력하여 github page 에 배포한다. 1hexo deploy 실행결과 1234567891011121314151617181920212223242526272829INFO Validating configINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[main 1ca47fb] Site updated: 2023-03-10 23:41:16 12 files changed, 1 insertion(+), 2826 deletions(-) delete mode 100644 css/fonts/FontAwesome.otf delete mode 100644 css/fonts/fontawesome-webfont.eot delete mode 100644 css/fonts/fontawesome-webfont.svg delete mode 100644 css/fonts/fontawesome-webfont.ttf delete mode 100644 css/fonts/fontawesome-webfont.woff delete mode 100644 css/fonts/fontawesome-webfont.woff2 delete mode 100644 css/images/banner.jpg delete mode 100644 fancybox/jquery.fancybox.min.css delete mode 100644 fancybox/jquery.fancybox.min.js delete mode 100644 js/jquery-3.4.1.min.js delete mode 100644 js/script.jsEnumerating objects: 19, done.Counting objects: 100% (19/19), done.Delta compression using up to 6 threadsCompressing objects: 100% (6/6), done.Writing objects: 100% (10/10), 831 bytes | 831.00 KiB/s, done.Total 10 (delta 2), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (2/2), completed with 2 local objects.To github.com:coffeeman4/coffeeman4.github.io.git a0701c1..1ca47fb HEAD -&gt; mainbranch &#x27;main&#x27; set up to track &#x27;git@github.com:coffeeman4/coffeeman4.github.io.git/main&#x27;.INFO Deploy done: git Github page 확인하기여기까지 진행했다면 https://coffeeman4.github.io/ 사이트에 접속하면 아래와 같은 화면을 확인할수 있다. 정리좀더 좋은 컨텐츠를 만들기 노력하는 커피맨이 되자~커피를 보충해준다면 더 노력해서 좋은글을 쓸수 있을것 같다.강요는 아니고~~ 글이 유익했다면 커피한잔 ok ? st=>start: 시작 e=>end: 종료 op1=>operation: 정적인 페이지만들기 op2=>operation: 배포하기 st(right)->op1(right)->op2(right)->e(right){\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[{"name":"blog","slug":"blog","permalink":"http://coffeeman1.github.io/categories/blog/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://coffeeman1.github.io/tags/blog/"}]}],"categories":[{"name":"blog","slug":"blog","permalink":"http://coffeeman1.github.io/categories/blog/"}],"tags":[{"name":"github","slug":"github","permalink":"http://coffeeman1.github.io/tags/github/"},{"name":"blog","slug":"blog","permalink":"http://coffeeman1.github.io/tags/blog/"}]}